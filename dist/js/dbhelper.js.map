{"version":3,"sources":["dbhelper.js"],"names":["indexController","IndexController","document","querySelector","DBHelper","callback","fetch","DATABASE_URL","then","response","ok","json","Error","restaurants","catch","err","error","message","id","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","v","i","neighborhoods","indexOf","uniqueNeighborhoods","cuisines","map","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"6XAAA,IAAMA,gBAAkB,IAAIC,gBAAgBC,SAASC,cAAc,SAK7DC,4HAaoBC,GACtBC,MAAMF,EAASG,cAAcC,KAAK,SAAAC,GAChC,GAAIA,EAASC,GALjB,OAAAD,EAAAE,OAQI,MAAM,IAAIC,MAAM,kCACfJ,KAAK,SAAAG,GALRL,IAAMF,EAASG,EACbP,gBAAaU,gBAAIG,GACfR,EAAA,KAAOI,KACRK,MAAA,SAAAC,GACD,IAAAC,EAAAA,sCAAAD,EAAAE,QACDZ,EAAOW,EAAA,oDALRE,EAAAb,GAoBAD,EAASe,iBAAiB,SAACH,EAAOH,GALpC,GAAAG,EAOMX,EAASW,EAAO,UACX,CACL,IAAMI,EAAaP,EAAYQ,KAAK,SAAAC,GAAA,OAAKA,EAAEJ,IAAMA,IAC7CE,EACFf,EAAS,KAAMe,GAPrBf,EAAA,4BAAA,0DAMsBkB,EAAAlB,GAEjBD,EAFDe,iBAEO,SAAAH,EAAAH,GAAE,GAAAG,EACPX,EAAAA,EAAS,UACV,CATL,IAAAmB,EAAAX,EAAAY,OAAA,SAAAH,GAAA,OAAAA,EAAAI,cAAAH,IAYDlB,EAAA,KAAAmB,4DAqBoCG,EAActB,GAdjDD,EAAAA,iBAASe,SAATH,EAA0BH,GACxB,GAAAG,EACEX,EAAAA,EAAA,UADF,CAIE,IAAMmB,EAAUX,EAAYY,OAAO,SAAAH,GAAA,OAAAA,EAAAK,cAAAA,IAAAtB,EAAA,KAAOqB,sEAyBDH,EAASI,EAActB,GAEpED,EAASe,iBAAiB,SAACH,EAAOH,GAChC,GAAIG,EACFX,EAASW,EAAO,UACX,CApBT,IAAAQ,EAAAX,EACSM,OAATf,IACEoB,EAAWA,EAAAC,OAAA,SAAAH,GAAA,OAAAA,EAAAI,cAAAH,KAEJ,OAFPI,IAGEH,EAAAA,EAAAC,OAAA,SAAAH,GAAA,OAAAA,EAAAK,cAAAA,KACmCtB,EAAA,KAAOsB,iDA8BtBtB,GAExBD,EAASe,iBAAiB,SAACH,EAAOH,GAChC,GAAIG,EACFX,EAASW,EAAO,UACX,CAxBTZ,IAAAA,EAASe,EAAkBH,IAAAA,SAADY,EAAQf,GAAPG,OAAOH,EAAgBgB,GAAAF,eAE9CtB,EAAAyB,EAAAL,OAAA,SAAAG,EAAAC,GAAA,OAAAC,EAAAC,QAAAH,IAAAC,IACDxB,EAAM,KAAA2B,4CAKDL,GACFH,EAAAA,iBAAkBC,SAAAA,EAAOZ,GAAA,GAAAG,EAAAX,EAAzBW,EAAA,UACD,CAEF,IAAAiB,EAAApB,EAAAqB,IAAA,SAAAN,EAAAC,GAAA,OAAAhB,EAAAgB,GAAAH,eAEJS,EAAAF,EAAAR,OAAA,SAAAG,EAAAC,GAAA,OAAAI,EAAAF,QAAAH,IAAAC,IAiCKxB,EAAS,KAAM8B,+CA3BnBf,GACAhB,MAAAA,wBAA0BgB,EAAAF,iDAKsCW,GAAtB,MAAA,QAAtCT,EAAAgB,0DAIDhB,EAAAc,GA+CH,OAxDA,IAAAG,OAAAC,KAAAC,QAWDC,SAAApB,EAAAqB,OAwCGC,MAAOtB,EAAWuB,KAtCtBC,IAAAxC,EAAAyC,iBAAAzB,GAwCIc,IAAKA,EACLY,UAAWT,OAAOC,KAAKS,UAAUC,4CAhKjC5C,MAAAA","file":"dbhelper.js","sourcesContent":["const indexController = new IndexController(document.querySelector('body'));\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.DATABASE_URL).then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      }\r\n      throw new Error('Network response was not ok.');\r\n    }).then(json => {\r\n      const restaurants = json;\r\n      indexController._onDataReceived(restaurants);\r\n      callback(null, restaurants);\r\n    }).catch(err => {\r\n      const error = (`Request failed. Returned status of ${err.message}`);\r\n      callback(error, null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant.\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database.\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type.\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood.\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // Filter by cuisine.\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // Filter by neighborhood.\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants.\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods.\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants.\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines.\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant.photograph}`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n"]}