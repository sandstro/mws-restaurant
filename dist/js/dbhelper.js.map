{"version":3,"sources":["dbhelper.js"],"names":["indexController","IndexController","document","querySelector","DBHelper","callback","_checkDataExists","then","restaurants","length","fetch","DATABASE_URL","response","ok","json","catch","err","error","message","id","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","v","i","neighborhoods","indexOf","uniqueNeighborhoods","cuisines","map","uniqueCuisines","arguments","undefined","hasOwnProperty","wall","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"6XAAA,IAAMA,gBAAkB,IAAIC,gBAAgBC,SAASC,cAAc,SAK7DC,4HAaoBC,GACtBL,gBAAgBM,mBAAmBC,KAAK,SAAAC,GACX,IAAvBA,EAAYC,OALpBC,MAAAN,EAAAO,cAAAJ,KAAA,SAAAK,GAOQ,GAAIA,EAASC,GACX,OAAOD,EAASE,OAJxBd,MAAAA,IAAAA,MAAgBM,kCACdC,KAAIC,SAAAA,GACFE,IAAMN,EAASO,EACbX,gBAAaa,gBAAIL,GACfH,EAAA,KAAOO,KACRG,MAAA,SAAAC,GACD,IAAAC,EAAAA,sCAAAD,EAAAE,QACDb,EAAOY,EAAA,QAGNZ,EAAAA,KAASG,iDAVfW,EAAAd,GA0BAD,EAASgB,iBAAiB,SAACH,EAAOT,GALpC,GAAAS,EAOMZ,EAASY,EAAO,UACX,CACL,IAAMI,EAAab,EAAYc,KAAK,SAAAC,GAAA,OAAKA,EAAEJ,IAAMA,IAC7CE,EACFhB,EAAS,KAAMgB,GAPrBhB,EAAA,4BAAA,0DAMsBmB,EAAAnB,GAEjBD,EAFDgB,iBAEO,SAAAH,EAAAT,GAAE,GAAAS,EACPZ,EAAAA,EAAS,UACV,CATL,IAAAoB,EAAAjB,EAAAkB,OAAA,SAAAH,GAAA,OAAAA,EAAAI,cAAAH,IAYDnB,EAAA,KAAAoB,4DAqBoCG,EAAcvB,GAdjDD,EAAAA,iBAASgB,SAATH,EAA0BT,GACxB,GAAAS,EACEZ,EAAAA,EAAA,UADF,CAIE,IAAMoB,EAAUjB,EAAYkB,OAAO,SAAAH,GAAA,OAAAA,EAAAK,cAAAA,IAAAvB,EAAA,KAAOsB,sEAyBDH,EAASI,EAAcvB,GAEpED,EAASgB,iBAAiB,SAACH,EAAOT,GAChC,GAAIS,EACFZ,EAASY,EAAO,UACX,CApBT,IAAAQ,EAAAjB,EACSY,OAAThB,IACEqB,EAAWA,EAAAC,OAAA,SAAAH,GAAA,OAAAA,EAAAI,cAAAH,KAEJ,OAFPI,IAGEH,EAAAA,EAAAC,OAAA,SAAAH,GAAA,OAAAA,EAAAK,cAAAA,KACmCvB,EAAA,KAAOuB,iDA8BtBvB,GAExBD,EAASgB,iBAAiB,SAACH,EAAOT,GAChC,GAAIS,EACFZ,EAASY,EAAO,UACX,CAxBTb,IAAAA,EAASgB,EAAkBH,IAAAA,SAADY,EAAQrB,GAAPS,OAAOT,EAAgBsB,GAAAF,eAE9CvB,EAAA0B,EAAAL,OAAA,SAAAG,EAAAC,GAAA,OAAAC,EAAAC,QAAAH,IAAAC,IACDzB,EAAM,KAAA4B,4CAKDL,GACFH,EAAAA,iBAAkBC,SAAAA,EAAOlB,GAAA,GAAAS,EAAAZ,EAAzBY,EAAA,UACD,CAEF,IAAAiB,EAAA1B,EAAA2B,IAAA,SAAAN,EAAAC,GAAA,OAAAtB,EAAAsB,GAAAH,eAEJS,EAAAF,EAAAR,OAAA,SAAAG,EAAAC,GAAA,OAAAI,EAAAF,QAAAH,IAAAC,IAiCKzB,EAAS,KAAM+B,+CA3BnBf,GACAjB,MAAAA,wBAA0BiB,EAAAF,iDAKsCW,GAAtB,IAAyBF,EAAzB,EAAAS,UAAA5B,aAAA6B,IAAAD,UAAA,IAAAA,UAAA,GAEW,OADjDhB,EAAAkB,eAAA,gBACAlB,EAAMY,WAAAA,MAA2CO,EACjDnC,aAAe4B,EAAAA,WAAf5B,OAEH,QAVDgB,EAAAoB,WAUC,sDA6C2BpB,EAAYc,GAlCrC,OAmCY,IAAIO,OAAOC,KAAKC,QAC7BC,SAAUxB,EAAWyB,OACrBC,MAAO1B,EAAW2B,KAzCpBC,IAAA7C,EAAA8C,iBAAA7B,GACAjB,IAAAA,EACE+C,UAAAT,OAAWC,KAAAS,UAAAC,4CAnIXjD,MAAAA","file":"dbhelper.js","sourcesContent":["const indexController = new IndexController(document.querySelector('body'));\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    indexController._checkDataExists().then(restaurants => {\r\n      if (restaurants.length === 0) {\r\n        fetch(DBHelper.DATABASE_URL).then(response => {\r\n          if (response.ok) {\r\n            return response.json();\r\n          }\r\n          throw new Error('Network response was not ok.');\r\n        }).then(json => {\r\n          const restaurants = json;\r\n          indexController._onDataReceived(restaurants);\r\n          callback(null, restaurants);\r\n        }).catch(err => {\r\n          const error = (`Request failed. Returned status of ${err.message}`);\r\n          callback(error, null);\r\n        });\r\n      } else {\r\n        callback(null, restaurants);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) { // Got the restaurant.\r\n          callback(null, restaurant);\r\n        } else { // Restaurant does not exist in the database.\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type.\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood.\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // Filter by cuisine.\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // Filter by neighborhood.\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants.\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods.\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants.\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines.\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant, wall = false) {\r\n    // Use 10.jpg as a default imgae is photograph missing.\r\n    if (!restaurant.hasOwnProperty('photograph')) {\r\n      restaurant.photograph = '10';\r\n    }\r\n    if (wall) {\r\n      return (`/img/wall/${restaurant.photograph}.jpg`);\r\n    }\r\n    return (`/img/${restaurant.photograph}.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n"]}