{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","map","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","option","createElement","innerHTML","neighborhood","value","append","fillCuisinesHTML","cuisine","window","initMap","setTitle","querySelector","setAttribute","loc","lat","lng","google","maps","Map","zoom","center","scrollwheel","updateRestaurants","addListener","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","m","setMap","createRestaurantHTML","restaurant","addMarkersToMap","li","className","wrapper","image","alt","name","src","imageUrlForRestaurant","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","location","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nlet fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nlet fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nlet fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nlet fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let setTitle = () => document.querySelector('#map iframe').setAttribute('title', 'Restaurants on Google Maps');\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n  self.map.addListener('tilesloaded', setTitle);\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nlet updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nlet resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nlet fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nlet createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  li.className = 'restaurant';\r\n\r\n  const wrapper = document.createElement('div');\r\n  wrapper.className = 'restaurant__wrapper';\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant__image';\r\n  image.alt = `An image of ${restaurant.name} in ${restaurant.neighborhood}`;\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  wrapper.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.className = 'restaurant__title';\r\n  name.innerHTML = restaurant.name;\r\n  wrapper.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.className = 'restaurant__paragraph';\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  wrapper.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.className = 'restaurant__paragraph';\r\n  address.innerHTML = restaurant.address;\r\n  wrapper.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.className = 'restaurant__link';\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  wrapper.append(more)\r\n\r\n  li.append(wrapper);\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nlet addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n"]}