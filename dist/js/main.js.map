{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","document","addEventListener","event","initMap","fetchNeighborhoods","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","createElement","option","value","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","append","center","zoom","scrollWheelZoom","L","tileLayer","mapboxToken","maxZoom","addTo","newMap","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fillRestaurantsHTML","resetRestaurants","markers","m","setMap","ul","restaurant","addMarkersToMap","createRestaurantHTML","intersectionObserver","isFavorite","entry","src","observer","changeHandler","remove","entries","li","className","toggleFavoriteStatus","target","classList","setAttribute","add","image","alt","name","window","imageUrlForRestaurant","unobserve","threshold","observe","wrapper","like","onclick","is_favorite","IntersectionObserver","setFavorite","more","address","marker","mapMarkerForRestaurant","on","location","href","options","url","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines;\r\nlet newMap;\r\nlet markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  initMap();\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nlet fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nlet fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nlet fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nlet fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nconst initMap = () => {\r\n  self.newMap = L.map('map', {\r\n    center: [40.722216, -73.987501],\r\n    zoom: 12,\r\n    scrollWheelZoom: false\r\n  });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n  mapboxToken: 'pk.eyJ1Ijoic2FuZHN0cm8iLCJhIjoiY2prbDRobHQ2MDg5bjNxdGg5Y2R2ZzN6ZSJ9.bqghcRTSbnJXRMIpBR371A',\r\n  maxZoom: 18,\r\n  attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n    '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n    'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n  id: 'mapbox.streets'\r\n  }).addTo(self.newMap);\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nlet updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nlet resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(m => m.setMap(null));\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nlet fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nlet createRestaurantHTML = (restaurant) => {\r\n  let intersectionObserver;\r\n\r\n  const changeHandler = (entries, observer) => {\r\n    entries.forEach(entry => {\r\n      if (entry.intersectionRatio > 0) {\r\n        entry.target.src = DBHelper.imageUrlForRestaurant(restaurant, true);\r\n        observer.unobserve(entry.target);\r\n      }\r\n    });\r\n  };\r\n\r\n  const toggleFavoriteStatus = (target, isFavorite) => {\r\n    if (!isFavorite) {\r\n      target.classList.remove('restaurant__favorite--true');\r\n      target.setAttribute('aria-label', 'set restaurant as favorite')\r\n    } else {\r\n      target.classList.add('restaurant__favorite--true');\r\n      target.setAttribute('aria-label', 'unset restaurant as favorite')\r\n    }\r\n  }\r\n\r\n  const li = document.createElement('li');\r\n  li.className = 'restaurant';\r\n\r\n  const wrapper = document.createElement('div');\r\n  wrapper.className = 'restaurant__wrapper';\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant__image';\r\n  image.alt = `An image of ${restaurant.name} in ${restaurant.neighborhood}`;\r\n\r\n  if ('IntersectionObserver' in window) {\r\n    intersectionObserver = new IntersectionObserver(changeHandler, { threshold: 0.2 });\r\n    intersectionObserver.observe(image);\r\n  }\r\n\r\n  wrapper.append(image);\r\n\r\n  const like = document.createElement('button')\r\n  like.className = 'restaurant__favorite';\r\n  like.innerHTML = '&#9825';\r\n  like.onclick = () => {\r\n    restaurant.is_favorite = !restaurant.is_favorite; // Toggle.\r\n    DBHelper.setFavorite(restaurant.id, restaurant.is_favorite);\r\n    toggleFavoriteStatus(like, restaurant.is_favorite); // Apply change to DOM.\r\n  };\r\n  toggleFavoriteStatus(like, restaurant.is_favorite); // Init DOM for favorite status.\r\n\r\n  const name = document.createElement('h2');\r\n  name.className = 'restaurant__title';\r\n  name.innerHTML = restaurant.name;\r\n  name.append(like);\r\n  wrapper.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.className = 'restaurant__paragraph';\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  wrapper.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.className = 'restaurant__paragraph';\r\n  address.innerHTML = restaurant.address;\r\n  wrapper.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.className = 'restaurant__link';\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  wrapper.append(more)\r\n\r\n  li.append(wrapper);\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nlet addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n    marker.on('click', handleClick);\r\n\r\n    function handleClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n"]}