{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","document","addEventListener","event","fetchNeighborhoods","DBHelper","error","self","console","fillNeighborhoodsHTML","arguments","length","undefined","select","getElementById","forEach","neighborhood","createElement","option","value","fetchCuisines","fillCuisinesHTML","cuisine","innerHTML","map","google","maps","Map","zoom","window","lat","lng","scrollwheel","updateRestaurants","loc","querySelector","setAttribute","center","nSelect","addListener","selectedIndex","nIndex","cSelect","cIndex","resetRestaurants","fillRestaurantsHTML","markers","m","setMap","ul","append","restaurant","addMarkersToMap","createRestaurantHTML","toggleFavoriteStatus","target","isFavorite","classList","add","changeHandler","remove","observer","unobserve","li","className","wrapper","image","name","IntersectionObserver","entries","entry","src","imageUrlForRestaurant","threshold","observe","like","onclick","is_favorite","id","intersectionObserver","address","urlForRestaurant","more","mapMarkerForRestaurant","marker","location","push"],"mappings":"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","file":"main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines;\r\nlet map;\r\nlet markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nlet fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nlet fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nlet fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nlet fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let setTitle = () => document.querySelector('#map iframe').setAttribute('title', 'Restaurants on Google Maps');\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n  self.map.addListener('tilesloaded', setTitle);\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nlet updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nlet resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(m => m.setMap(null));\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nlet fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nlet createRestaurantHTML = (restaurant) => {\r\n  let intersectionObserver;\r\n\r\n  const changeHandler = (entries, observer) => {\r\n    entries.forEach(entry => {\r\n      if (entry.intersectionRatio > 0) {\r\n        entry.target.src = DBHelper.imageUrlForRestaurant(restaurant, true);\r\n        observer.unobserve(entry.target);\r\n      }\r\n    });\r\n  };\r\n\r\n  const toggleFavoriteStatus = (target, isFavorite) => {\r\n    if (!isFavorite) {\r\n      target.classList.remove('restaurant__favorite--true');\r\n      target.setAttribute('aria-label', 'set restaurant as favorite')\r\n    } else {\r\n      target.classList.add('restaurant__favorite--true');\r\n      target.setAttribute('aria-label', 'unset restaurant as favorite')\r\n    }\r\n  }\r\n\r\n  const li = document.createElement('li');\r\n  li.className = 'restaurant';\r\n\r\n  const wrapper = document.createElement('div');\r\n  wrapper.className = 'restaurant__wrapper';\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant__image';\r\n  image.alt = `An image of ${restaurant.name} in ${restaurant.neighborhood}`;\r\n\r\n  if ('IntersectionObserver' in window) {\r\n    intersectionObserver = new IntersectionObserver(changeHandler, { threshold: 0.2 });\r\n    intersectionObserver.observe(image);\r\n  }\r\n\r\n  wrapper.append(image);\r\n\r\n  const like = document.createElement('button')\r\n  like.className = 'restaurant__favorite';\r\n  like.innerHTML = '&#9825';\r\n  like.onclick = () => {\r\n    restaurant.is_favorite = !restaurant.is_favorite; // Toggle.\r\n    DBHelper.setFavorite(restaurant.id, restaurant.is_favorite);\r\n    toggleFavoriteStatus(like, restaurant.is_favorite); // Apply change to DOM.\r\n  };\r\n  toggleFavoriteStatus(like, restaurant.is_favorite); // Init DOM for favorite status.\r\n\r\n  const name = document.createElement('h2');\r\n  name.className = 'restaurant__title';\r\n  name.innerHTML = restaurant.name;\r\n  name.append(like);\r\n  wrapper.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.className = 'restaurant__paragraph';\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  wrapper.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.className = 'restaurant__paragraph';\r\n  address.innerHTML = restaurant.address;\r\n  wrapper.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.className = 'restaurant__link';\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  wrapper.append(more)\r\n\r\n  li.append(wrapper);\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nlet addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n"]}