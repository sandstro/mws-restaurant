{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","map","window","initRestaurantMap","fetchRestaurantFromURL","error","console","setTitle","self","google","maps","Map","document","getElementById","center","latlng","zoom","mapMarkerForRestaurant","querySelector","setAttribute","callback","DBHelper","fetchRestaurantById","id","getParameterByName","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","address","image","alt","neighborhood","nodeHasContent","operating_hours","cuisine","then","results","handleSubmit","fillReviewsHTML","value","rating","comment","review","createdAt","Date","restaurant_id","parseInt","restaurantId","event","fillSubmittedReviewHTML","reset","postReview","ul","insertBefore","createReviewHTML","firstChild","container","appendChild","fillRestaurantHoursHTML","day","createElement","tabIndex","key","row","operatingHours","time","hours","reviews","title","noReviews","className","li","status","style","background","color","paddingLeft","date","navigator","onLine","comments","breadcrumb","children","url","fillBreadcrumb","location","href","replace","decodeURIComponent","node"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nlet map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initRestaurantMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    let setTitle = () => document.querySelector('#map iframe').setAttribute('title', 'Location on Google Maps');\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb(restaurant);\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n      self.map.addListener('tilesloaded', setTitle);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nlet fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // Restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // No id found in URL.\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage.\n */\nlet fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img'\n  image.alt = `An image of ${restaurant.name} in ${restaurant.neighborhood}`;\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // Fill operating hours.\n  if (restaurant.operating_hours && !nodeHasContent('#restaurant-hours')) {\n    fillRestaurantHoursHTML(restaurant.operating_hours);\n  }\n\n  // Fill reviews.\n  DBHelper.fetchReviews(restaurant.id).then(results => {\n    fillReviewsHTML(results);\n  });\n}\n\n/**\n * Handle submit when generating new review.\n */\nconst handleSubmit = () => {\n  event.preventDefault(); // prevent default submit from reloading page\n  const restaurantId = getParameterByName('id');\n  const name = document.querySelector('input[name=\"name\"]').value;\n  const rating = document.querySelector('select[name=\"rating\"] option:checked').value;\n  const comment = document.querySelector('textarea[name=\"comment\"]').value;\n  const review = {\n    createdAt: new Date(),\n    restaurant_id: parseInt(restaurantId),\n    rating: parseInt(rating),\n    name,\n    comment,\n  };\n  DBHelper.postReview(review);\n  fillSubmittedReviewHTML(review);\n  document.querySelector('form').reset(); // reset form to mimic submit\n};\n\n/**\n * Fill submitted review HTML.\n */\nfillSubmittedReviewHTML = review => {\n  const noReviews = document.querySelector('.reviews--none');\n  if (noReviews) noReviews.remove();\n  const container = document.querySelector('#reviews-container');\n  const ul = document.querySelector('#reviews-list');\n  ul.insertBefore(createReviewHTML(review), ul.firstChild);\n  container.appendChild(ul);\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nlet fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.tabIndex = 0;\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.tabIndex = 0;\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nlet fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.id = 'reviews__heading'\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.className = 'reviews--none';\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nlet createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n\n  if (!navigator.onLine) {\n    const status = document.createElement('div');\n    status.className = 'restaurant__review__offline__label';\n    status.style.background = '#f00';\n    status.style.color = '#fff';\n    status.style.paddingLeft = '1em';\n    status.innerHTML = 'Connection lost!';\n    li.appendChild(status);\n  }\n\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = new Date(review.createdAt);\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments || review.comment;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu.\n */\nlet fillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  if (breadcrumb.children.length === 1) {\n    const li = document.createElement('li');\n    li.innerHTML = restaurant.name;\n    breadcrumb.appendChild(li);\n  }\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nlet getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n/**\n * Check if node contains data.\n */\nlet nodeHasContent = (node) => {\n  return document.querySelector(node).children.length > 0;\n}\n"]}