{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","newMap","document","event","initRestaurantMap","window","fetchRestaurantFromURL","error","self","L","map","console","latlng","lat","lng","zoom","scrollWheelZoom","maxZoom","tileLayer","attribution","id","fillBreadcrumb","callback","getParameterByName","fetchRestaurantById","DBHelper","fillRestaurantHTML","arguments","length","undefined","getElementById","innerHTML","name","address","image","className","neighborhood","cuisine_type","operating_hours","nodeHasContent","fillRestaurantHoursHTML","handleSubmit","preventDefault","restaurantId","querySelector","value","rating","createdAt","restaurant_id","comment","parseInt","reset","fillSubmittedReviewHTML","review","noReviews","remove","container","ul","firstChild","operatingHours","hours","key","row","createElement","day","time","tabIndex","appendChild","reviews","title","fillReviewsHTML","forEach","createReviewHTML","navigator","onLine","status","style","background","li","color","Date","paddingLeft","comments","date","breadcrumb","children","url","results","exec","decodeURIComponent","replace","node"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["let restaurant;\nlet newMap;\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  initRestaurantMap();\n});\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initRestaurantMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: 'pk.eyJ1Ijoic2FuZHN0cm8iLCJhIjoiY2prbDRobHQ2MDg5bjNxdGg5Y2R2ZzN6ZSJ9.bqghcRTSbnJXRMIpBR371A',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'\n      }).addTo(self.newMap);\n      fillBreadcrumb(restaurant);\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nlet fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // Restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // No id found in URL.\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage.\n */\nlet fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img'\n  image.alt = `An image of ${restaurant.name} in ${restaurant.neighborhood}`;\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // Fill operating hours.\n  if (restaurant.operating_hours && !nodeHasContent('#restaurant-hours')) {\n    fillRestaurantHoursHTML(restaurant.operating_hours);\n  }\n\n  // Fill reviews.\n  DBHelper.fetchReviews(restaurant.id).then(results => {\n    fillReviewsHTML(results);\n  });\n}\n\n/**\n * Handle submit when generating new review.\n */\nconst handleSubmit = () => {\n  event.preventDefault(); // prevent default submit from reloading page\n  const restaurantId = getParameterByName('id');\n  const name = document.querySelector('input[name=\"name\"]').value;\n  const rating = document.querySelector('select[name=\"rating\"] option:checked').value;\n  const comment = document.querySelector('textarea[name=\"comment\"]').value;\n  const review = {\n    createdAt: new Date(),\n    restaurant_id: parseInt(restaurantId),\n    rating: parseInt(rating),\n    name,\n    comment,\n  };\n  DBHelper.postReview(review);\n  fillSubmittedReviewHTML(review);\n  document.querySelector('form').reset(); // reset form to mimic submit\n};\n\n/**\n * Fill submitted review HTML.\n */\nfillSubmittedReviewHTML = review => {\n  const noReviews = document.querySelector('.reviews--none');\n  if (noReviews) noReviews.remove();\n  const container = document.querySelector('#reviews-container');\n  const ul = document.querySelector('#reviews-list');\n  ul.insertBefore(createReviewHTML(review), ul.firstChild);\n  container.appendChild(ul);\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nlet fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.tabIndex = 0;\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.tabIndex = 0;\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nlet fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.id = 'reviews__heading'\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.className = 'reviews--none';\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nlet createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n\n  if (!navigator.onLine) {\n    const status = document.createElement('div');\n    status.className = 'restaurant__review__offline__label';\n    status.style.background = '#f00';\n    status.style.color = '#fff';\n    status.style.paddingLeft = '1em';\n    status.innerHTML = 'Connection lost!';\n    li.appendChild(status);\n  }\n\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = new Date(review.createdAt);\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments || review.comment;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu.\n */\nlet fillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  if (breadcrumb.children.length === 1) {\n    const li = document.createElement('li');\n    li.innerHTML = restaurant.name;\n    breadcrumb.appendChild(li);\n  }\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nlet getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n/**\n * Check if node contains data.\n */\nlet nodeHasContent = (node) => {\n  return document.querySelector(node).children.length > 0;\n}\n"]}