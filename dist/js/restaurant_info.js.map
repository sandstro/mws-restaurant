{"version":3,"sources":["restaurant_info.js"],"names":["map","restaurant","window","initRestaurantMap","fetchRestaurantFromURL","error","console","setTitle","self","google","maps","Map","document","getElementById","center","latlng","zoom","mapMarkerForRestaurant","querySelector","setAttribute","callback","DBHelper","fetchRestaurantById","id","getParameterByName","fillRestaurantHTML","arguments","length","undefined","innerHTML","name","address","image","alt","neighborhood","nodeHasContent","operating_hours","reviews","fillReviewsHTML","fillRestaurantHoursHTML","operatingHours","row","createElement","day","tabIndex","key","appendChild","time","hours","title","container","noReviews","ul","review","li","date","rating","comments","breadcrumb","children","url","fillBreadcrumb","location","href","replace","results","decodeURIComponent","node"],"mappings":"aAAA,IACIA,IADAC,gBAAAA,EAMJC,OAAOC,kBAAoB,WACzBC,uBAAuB,SAACC,EAAOJ,GAA/BG,EACEE,QAAIC,MAAWF,IAAfG,KAAAR,IAAA,IAAAS,OAAAC,KAAAC,IAAAC,SAAAC,eAAA,QACIR,KAAJ,GAAaS,OAAAb,EAAAc,OACXT,aAAcD,IAEdG,eAAeC,GACbO,SAAMC,uBADuDT,KAAAP,WAAAO,KAAAR,KAE7Dc,KAAAA,IAAAA,YAAmBC,cARpBZ,WAAAA,OAAPS,SAA2BM,cAAM,eAAAC,aAAA,QAAA,iCAgBhC,IAhBDf,uBAAA,SAAAgB,GAsBE,GAAIZ,KAAKP,WAJXmB,EAAA,KAAAZ,KAAAP,gBAIE,CADF,IAAIG,EAAAA,mBAAyB,MACvBI,EAGHa,SAAAC,oBAAAC,EAAA,SAAAlB,EAAAJ,IACKsB,KAAKC,WAAAA,IACXC,qBAIEJ,EAASC,KAAAA,IAJAhB,QAAAD,MAAAA,MALYA,MAAA,0BACrBe,EAASf,MAAMG,SAgBdiB,mBARD,WAAA,IAAAxB,EAAA,EAAAyB,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAlB,KAAAP,WASDW,SAAAC,eAAA,mBAnBHgB,UAAA5B,EAAA6B,KAsBAlB,SAAAC,eAAA,sBAQUgB,UAAY5B,EAAW8B,QALjC,IAAIN,EAAAA,SAAqBZ,eAArBY,kBAAuDO,EAAjC/B,UAAiC,iBASzD+B,EAAMC,IAAN,eAA2BhC,EAAW6B,KAAtC,OAAiD7B,EAAWiC,aAR5DF,EAAMF,IAAOlB,SAASC,sBAAeZ,GAWrBW,SAASC,eAAe,sBARlCkB,UAAUnB,EAASC,aAGnBmB,EAAQpB,kBAAAuB,eAAwB,sBACtCH,wBAAkB/B,EAAlBmC,iBAYInC,EAAWoC,UAAYF,eAAe,kBAR1CG,gBAAgB1B,EAASC,UAOzB0B,wBAAA,WAAA,IAAAC,EAAA,EAAAd,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAlB,KAAAP,WAAAmC,gBACInC,EAAAA,SAAAY,eAAuBsB,oBACzBG,IAAAA,IAAAA,KAAAA,EAA2BD,CAC5B,IAAAI,EAAA7B,SAAA8B,cAAA,MAWOC,EAAM/B,SAAS8B,cAAc,MARvCC,EAAAC,SAAA,EAUID,EAAId,UAAYgB,EAChBJ,EAAIK,YAAYH,GARgE,IAArDH,EAAAA,SAAqDE,cAAA,MAWhFK,EAAKH,SAAW,EAVlBG,EAAMC,UAAQpC,EAASC,GACvB4B,EAAKK,YAAWN,GAadQ,EAAMF,YAAYL,KAJlBM,gBAAA,WAAA,IAAAV,EAAA,EAAAX,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAAlB,KAAAP,WAAAoC,QACAU,EAAAnC,SAAiB4B,eAAjB,qBACIM,EAAAA,SAAJJ,cAAA,MAgBF,GAJAO,EAAM1B,GAAK,mBAVTyB,EAAAA,UAAMF,UACPI,EAAAJ,YAAAG,IAaIZ,EAAS,CAVhB,IAAAc,EAAAvC,SAAA8B,cAAA,KAGIJ,OASAa,EAAUtB,UAAY,uBACtBqB,EAAUJ,YAAYK,GAGxB,IAAMC,EAAKxC,SAASC,eAAe,gBAZnCwB,EAAMa,QAAYtC,SAAAA,GAClBwC,EAAMH,YAAQrC,iBAAAyC,MAEdJ,EAAMpB,YAAYuB,IAMhBF,iBAAUJ,SAAAA,GACV,IAAAQ,EAAA1C,SAAA8B,cAAA,MACDZ,EAAAlB,SAAA8B,cAAA,KACDZ,EAAMsB,UAAKxC,EAASC,KACpBwB,EAAAA,YAAAP,GAEC,IAFDyB,EAAA3C,SAAA8B,cAAA,KAGAQ,EAAAA,UAAUJ,EAAVS,KAjBFD,EAAAR,YAAAS,GAoBA,IAAAC,EAAA5C,SAAA8B,cAAA,KAcEc,EAAO3B,UAAP,WAA8BwB,EAAOG,OACrCF,EAAGR,YAAYU,GAXf,IAAMF,EAAK1C,SAAS8B,cAApB,KAiBA,OAhBAe,EAAM3B,UAAgBY,EAAAA,SACtBZ,EAAAA,YAAA2B,GAeOH,GAPPE,eAAA,WAAA,IAAAvD,EAAA,EAAAyB,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA8B2B,KAAAA,WAC3BP,EAAYU,SAAf3C,eAAA,cAcA,GAAmC,IAA/B6C,EAAWC,SAAShC,OAAc,CAZtC,IAAM8B,EAAAA,SAAW7C,cAAS8B,MAC1Be,EAAAA,UAAS5B,EAAmB4B,KAC5BH,EAAGR,YAAHQ,KAoBE9B,mBAAqB,SAACM,EAAM8B,GAZ5BC,IAAmDD,EAAjC3D,OAAiC6D,SAAAC,MAerDjC,EAAOA,EAAKkC,QAAQ,UAAW,QAd/B,IACAC,EADMP,IAAa9C,OAAb8C,OAAsB7C,EAAtB6C,qBACSC,KAAXC,GACF,OAAAK,EAEAP,EAAWZ,GALfoB,mBAAAD,EAAA,GAAAD,QAAA,MAAA,MAMG,GAFInC,MASLM,eACQjC,SAAAA,GACR4B,OAAA,EAAOA,SAAKkC,cAALG,GAAwBR,SAA/BhC","file":"restaurant_info.js","sourcesContent":["let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initRestaurantMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    let setTitle = () => document.querySelector('#map iframe').setAttribute('title', 'Location on Google Maps');\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb(restaurant);\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n      self.map.addListener('tilesloaded', setTitle);\n    }\n  });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nlet fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // Restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // No id found in URL.\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage.\n */\nlet fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img'\n  image.alt = `An image of ${restaurant.name} in ${restaurant.neighborhood}`;\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // Fill operating hours.\n  if (restaurant.operating_hours && !nodeHasContent('#restaurant-hours')) {\n    fillRestaurantHoursHTML(restaurant.operating_hours);\n  }\n  // Fill reviews.\n  if (restaurant.reviews && !nodeHasContent('#reviews-list')) {\n    fillReviewsHTML(restaurant.reviews);\n  }\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nlet fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.tabIndex = 0;\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.tabIndex = 0;\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nlet fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.id = 'reviews__heading'\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nlet createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu.\n */\nlet fillBreadcrumb = (restaurant = self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  if (breadcrumb.children.length === 1) {\n    const li = document.createElement('li');\n    li.innerHTML = restaurant.name;\n    breadcrumb.appendChild(li);\n  }\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nlet getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\n/**\n * Check if node contains data.\n */\nlet nodeHasContent = (node) => {\n  return document.querySelector(node).children.length > 0;\n}\n"]}