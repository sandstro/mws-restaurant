{"version":3,"sources":["index.js"],"names":["openDatabase","navigator","serviceWorker","idb","open","upgradeDb","createObjectStore","keyPath","IndexController","container","this","_container","_dbPromise","prototype","_onDataReceived","data","restaurants","db","store","transaction","objectStore","restaurant","tx","openCursor","then","cursor","advance","deleteRest","delete","continue","_showCachedMessages","indexController","showingData","getAll","classList","addRestaurant","r","id","getParameterByName","querySelector","children","length","_checkDataExists","resetRestaurants","fillRestaurantsHTML","fillBreadcrumb","fillRestaurantHTML"],"mappings":"aAGA,SAASA,eACP,OAAKC,UAAUC,cAEdC,IAAAC,KAAA,aAAA,EAAA,SAAAC,GAGaA,EAAUC,kBAAkB,eAD1CC,QAAWH,SALJJ,QAAAA,UAUR,SAAAQ,gBAAAC,GAGCC,KAAKC,WAAaF,EADpBC,KAAAE,WAASJ,eACPE,KAAKC,sBAQPH,gBAAgBK,UAAUC,gBAAkB,SAASC,GACnD,IAAIC,EAAcD,EAAlBL,KAAIM,WAAAA,KAAcD,SAAlBE,GAGE,GAAKA,EAAL,CAAA,IAGIC,EAHKD,EAAAE,YAAA,cAAA,aAGMC,YAAY,eAD3BJ,EAAYG,QAAAA,SAAYE,GACxBH,EAAIA,IAAQI,KAMZJ,EAAMK,WAAW,KAAM,QAAQC,KAAK,SAASC,GAD7C,OAAAA,EAAAC,QAAA,MACAR,KAAMK,SAAWI,EAAMF,GACrB,GAAAA,EAEA,OAHFA,EAEQG,SACDH,EAAQI,WAAAL,KAAAG,SAUnBnB,gBAAgBK,UAAUiB,oBAAsB,WAC9C,IAAIC,EAAkBrB,KAAtB,OAAIqB,KAAAA,WAAkBP,KAAtB,SAAAP,GAIE,GAAAA,IAAAc,EAAAC,cAKA,OAHWD,EAAAA,YAAgBC,eAAeZ,YAAA,eAG7Ba,SAAST,KAAK,SAASR,GADhCE,EAAWC,WAAYe,UAAed,SAAAA,UAC1CW,EAAOI,cAAoBnB,EAASA,KAAa,SAAAoB,GAAA,OAAAA,EAAAC,IAAAC,mBAAA,SAE7CP,EAAgBI,eAAcnB,QAWtCR,gBAAgBK,UAAUmB,YAAc,WAHxC,QAKMtB,KAAKC,WAAW4B,cAAc,kBAC7B7B,KAAKC,WAAW4B,cAAc,gBAHc,IAAnD/B,KAAAA,WAAgBK,cAAUmB,eAAcQ,SAAWC,QAWnDjC,gBAAgBK,UAAU6B,iBAAmB,WAC3C,OAAOhC,KAAKE,WAAWY,KAAK,SAAAP,GAE1B,OADYA,EAAGE,YAAY,eAAeC,YAAY,eACzCa,SAAST,KAAK,SAAAR,GACzB,OAAOA,OAUX2B,gBAAAA,UAAiB3B,eAAjB,SAAAA,GACA4B,iBAAAA,GAFFA,oBAAA5B,IASER,gBAAAK,UAAgBsB,cAAA,SAAAd,GACdwB,IACAC,eAAAA,GACDA,mBAAAzB","file":"index.js","sourcesContent":["/**\n * Create database if service worker is supported.\n */\nfunction openDatabase() {\n  if (!navigator.serviceWorker) {\n    return Promise.resolve();\n  }\n\n  return idb.open('restaurant', 1, function(upgradeDb) {\n    var store = upgradeDb.createObjectStore('restaurants', {\n      keyPath: 'id'\n    });\n  });\n}\n\nfunction IndexController(container) {\n  this._container = container;\n  this._dbPromise = openDatabase();\n  this._showCachedMessages();\n}\n\n/**\n * Put data to IndexedDB whenever live data is fetched and received.\n */\nIndexController.prototype._onDataReceived = function(data) {\n  var restaurants = data;\n\n  this._dbPromise.then(function(db) {\n    if (!db) return;\n\n    var tx = db.transaction('restaurants', 'readwrite');\n    var store = tx.objectStore('restaurants');\n    restaurants.forEach(function(restaurant) {\n      store.put(restaurant);\n    });\n\n    // Only store 12 newest restaurants.\n    store.openCursor(null, \"prev\").then(function(cursor) {\n      return cursor.advance(12);\n    }).then(function deleteRest(cursor) {\n      if (!cursor) return;\n      cursor.delete();\n      return cursor.continue().then(deleteRest);\n    });\n  });\n};\n\n/**\n * Run at initialization, show cached content before fetching new data.\n */\nIndexController.prototype._showCachedMessages = function() {\n  var indexController = this;\n\n  return this._dbPromise.then(function(db) {\n    // If we're already showing restaurant(s), eg shift-refresh\n    // or the very first load, there's no point fetching\n    // posts from IDB\n    if (!db || indexController.showingData()) return;\n\n    var store = db.transaction('restaurants').objectStore('restaurants');\n    return store.getAll().then(function(restaurants) {\n      if (indexController._container.classList.contains('inside')) {\n        indexController.addRestaurant(restaurants.find(r => r.id == getParameterByName('id')));\n      } else {\n        indexController.addRestaurants(restaurants);\n      }\n    });\n  });\n};\n\n/**\n * Check if data in the DOM.\n */\nIndexController.prototype.showingData = function() {\n  return (\n    !!this._container.querySelector('.restaurant') ||\n    (!!this._container.querySelector('#breadcrumb') &&\n    this._container.querySelector('#breadcrumb').children.length === 2)\n  );\n};\n\n/**\n * Check if data in IndexedDB and return restaurants.\n */\nIndexController.prototype._checkDataExists = function() {\n  return this._dbPromise.then(function(db) {\n    var store = db.transaction('restaurants').objectStore('restaurants');\n    return store.getAll().then(function(restaurants) {\n      return restaurants;\n    });\n  });\n};\n\n\n/**\n * Add restaurants from cache.\n */\nIndexController.prototype.addRestaurants = function(restaurants) {\n  resetRestaurants(restaurants);\n  fillRestaurantsHTML(restaurants);\n};\n\n/**\n * Add restaurant from cache.\n */\nIndexController.prototype.addRestaurant = function(restaurant) {\n  if (restaurant) {\n    fillBreadcrumb(restaurant);\n    fillRestaurantHTML(restaurant);\n  }\n};\n"]}