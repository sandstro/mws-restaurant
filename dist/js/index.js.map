{"version":3,"sources":["index.js"],"names":["openDatabase","navigator","serviceWorker","idb","open","upgradeDb","oldVersion","keyPath","createObjectStore","IndexController","container","this","DATABASE_URL","_container","prototype","fetchReviews","restaurantId","_this","fetch","then","reviews","_dbPromise","db","store","json","transaction","objectStore","constructor","Array","tx","put","review","Promise","catch","error","getObjectFromStore","reviewsInStore","resolve","index","getAll","data","restaurants","forEach","restaurant","openCursor","cursor","continue","deleteRest","querySelector","children","length","_checkDataExists"],"mappings":"aAGA,SAASA,eACP,OAAKC,UAAUC,cAEdC,IAAAC,KAAA,aAAA,EAAA,SAAAC,GAGC,OAAOA,EAAUC,YADnB,KAAOH,EACLE,EAAOA,kBAAP,eACEE,QAAA,OAEIA,KAAAA,EADyCF,EAA3CG,kBAAA,WAGFD,QAAA,OACEF,YAAUG,aAAkB,oBAZ3BR,QAAAA,UAiBR,SAAAS,gBAAAC,GAGCC,KAAKC,aAAe,wBADtBD,KAAAE,WAASJ,EACPE,KAAKC,WAALZ,eAGDS,gBAAAK,UAAAC,aAAA,SAAAC,GAAA,IAAAC,EAAAN,KAGC,OAAOO,MAASP,KAAKC,aAAd,2BAAqDI,GAD9DP,KAAAA,SAAAA,GAAAA,OAAgBK,EAAAA,SAAgDK,KAAA,SAAAC,GAUtC,OANpBH,EAAKI,WAAWF,KAAK,SAAAG,GAHzB,GAAOJ,EAAP,CACQ,IACAK,EADaC,EAAbC,YAAA,UAAA,aACAC,YAAW,WAERJ,EAAIK,cAAAC,MACHC,EAAQJ,QAAAA,SAAAA,GAAAA,OAAYF,EAAWO,IAAAC,KAMnCR,EAAMO,IAAIV,MAFMY,QAAUT,QAAUQ,KAApBE,MAAhB,SAAAC,GACD,OAAMjB,EAAAkB,mBAAAnB,GAAAG,KAAA,SAAAiB,GAAA,OAAAJ,QAAAK,QAAAD,QAIT3B,gBAAOuB,UAAAG,mBAAP,SAAAnB,GACD,OAAEiB,KAAMZ,WAAAF,KAAS,SAAAG,GAChB,GAAAA,EAhBJ,OAgBwEU,EAAQK,YAAQD,WAAlCV,YAAA,WAAlDY,MAAA,cAhBJC,OAAAvB,MAwBEP,gBAAcc,UAAMe,gBAApB,SAAAE,GACA,IAAAC,EAAaF,EACd5B,KALDU,WAAAF,KAAA,SAAAG,GADF,GAAAA,EAAA,CASA,IASQC,EATRD,EAAAG,YAAA,cAAA,aASmBC,YAAY,eAC3Be,EAAYC,QAAQ,SAASC,GAPjClC,EAAAA,IAAgBK,KAYZS,EAAMqB,WAAW,KAAM,QAAQzB,KAAK,SAAS0B,GAP7C,OAASvB,EAAGG,QAAY,MACxBN,KAAII,SAAWG,EAAYmB,GAC3BJ,GAAAA,EAAA,OACElB,EAAMO,SADRe,EAAAC,WAAA3B,KAAA4B,SAUEtC,gBAAOoC,UAAOC,YAAgBC,WAC/B,QAhBHpC,KAAAE,WAAAmC,cAAA,kBAFFrC,KAAAE,WAAAmC,cAAA,gBA6BqE,IAAjErC,KAAKE,WAAWmC,cAAc,eAAeC,SAASC,QAO1DzC,gBAAgBK,UAAUqC,iBAAmB,WAH7C,OAAAxC,KAAAU,WAAAF,KAAA,SAAAG,GAMI,OADYA,EAAGG,YAAY,eAAeC,YAAY,eACzCa,SAASpB,KAAK,SAASsB,GAHxChC,OAAAA","file":"index.js","sourcesContent":["/**\n * Create database if service worker is supported.\n */\nfunction openDatabase() {\n  if (!navigator.serviceWorker) {\n    return Promise.resolve();\n  }\n\n  return idb.open('restaurant', 2, function(upgradeDb) {\n    switch(upgradeDb.oldVersion) {\n      case 0:\n        upgradeDb.createObjectStore('restaurants', {\n          keyPath: 'id'\n        });\n      case 1:\n        upgradeDb.createObjectStore('reviews', {\n          keyPath: 'id'\n        }).createIndex('restaurant', 'restaurant_id');\n    }\n  });\n}\n\nfunction IndexController(container) {\n  this.DATABASE_URL = 'http://localhost:1337';\n  this._container = container;\n  this._dbPromise = openDatabase();\n}\n\nIndexController.prototype.fetchReviews = function(restaurantId) {\n  return fetch(`${this.DATABASE_URL}/reviews/?restaurant_id=${restaurantId}`)\n    .then(resp => resp.json())\n    .then(reviews => {\n      this._dbPromise.then(db => {\n        if (!db) return;\n        const tx = db.transaction('reviews', 'readwrite');\n        const store = tx.objectStore('reviews');\n\n        if (reviews.constructor === Array) {\n          reviews.forEach(review => store.put(review));\n        } else {\n          store.put(reviews);\n        }\n      });\n      return Promise.resolve(reviews);\n    }).catch(error => {\n      return this.getObjectFromStore(restaurantId).then(reviewsInStore => Promise.resolve(reviewsInStore));\n    });\n};\n\nIndexController.prototype.getObjectFromStore = function(restaurantId) {\n  return this._dbPromise.then(db => {\n    if (!db) return;\n    const store = db.transaction('reviews').objectStore('reviews');\n    const index = store.index('restaurant');\n    return index.getAll(restaurantId);\n  });\n};\n\n/**\n * Put data to IndexedDB whenever live data is fetched and received.\n */\nIndexController.prototype._onDataReceived = function(data) {\n  var restaurants = data;\n  this._dbPromise.then(function(db) {\n    if (!db) return;\n\n    var tx = db.transaction('restaurants', 'readwrite');\n    var store = tx.objectStore('restaurants');\n    restaurants.forEach(function(restaurant) {\n      store.put(restaurant);\n    });\n\n    // Only store 12 newest restaurants.\n    store.openCursor(null, \"prev\").then(function(cursor) {\n      return cursor.advance(12);\n    }).then(function deleteRest(cursor) {\n      if (!cursor) return;\n      cursor.delete();\n      return cursor.continue().then(deleteRest);\n    });\n  });\n};\n\n/**\n * Check if data in the DOM.\n */\nIndexController.prototype.showingData = function() {\n  return (\n    !!this._container.querySelector('.restaurant') ||\n    (!!this._container.querySelector('#breadcrumb') &&\n    this._container.querySelector('#breadcrumb').children.length === 2)\n  );\n};\n\n/**\n * Check if data in IndexedDB and return restaurants.\n */\nIndexController.prototype._checkDataExists = function() {\n  return this._dbPromise.then(function(db) {\n    var store = db.transaction('restaurants').objectStore('restaurants');\n    return store.getAll().then(function(restaurants) {\n      return restaurants;\n    });\n  });\n};\n"]}